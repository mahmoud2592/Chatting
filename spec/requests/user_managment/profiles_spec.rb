require 'rails_helper'
require_relative '../../support/session_spec_helper'
include SessionSpecHelper
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/profiles", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Profile. As you add validations to Profile, be sure to
  # adjust the attributes here as well.

  user = FactoryBot.create :broker

  let(:valid_attributes) {
    attributes_for :profile, owner_id: user.id, creator_id: user.id
  }

  let(:invalid_attributes) {
    attributes_for :profile, email: "invalid mail"
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ProfilesController, or in your router and rack
  # middleware. Be sure to keep this updated too.

  let(:valid_headers) {
    session_headers(user)
  }


  describe "GET /show" do
    it "renders a successful response" do
      get myprofile_path, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  
  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { bio: "new bio" }
      }
      it "updates the requested profile" do
        get myprofile_path, headers: valid_headers, as: :json
        profile = JSON.parse(response.body)
        expect(profile["bio"]).not_to eq(new_attributes[:bio])

        patch myprofile_path,
              params: { profile: new_attributes }, headers: valid_headers, as: :json
        get myprofile_path, headers: valid_headers, as: :json
        profile = JSON.parse(response.body)
        expect(profile["bio"]).to eq(new_attributes[:bio])
      end

      it "renders a JSON response with the profile" do
        patch myprofile_url,
              params: { profile: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the profile" do
        patch myprofile_url,
              params: { profile: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
