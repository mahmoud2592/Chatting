require 'rails_helper'
require_relative '../../support/session_spec_helper'
include SessionSpecHelper
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'Forgot/Reset Password', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # PasswordManagment. As you add validations to PasswordManagment, be sure to
  # adjust the attributes here as well.

  # # This should return the minimal set of values that should be in the headers
  # # in order to pass any filters (e.g. authentication) defined in
  # # PasswordManagmentsController, or in your router and rack
  # # middleware. Be sure to keep this updated too.

  describe 'Forgot Password' do
    context 'Sending otp to authenticate account owner' do
      let(:user) { FactoryBot.create :user, reset_password_otp: nil }
      let(:mobile) { user.mobile }
      it 'success for an already existed mobile' do
        post forgot_password_url, params: { mobile: mobile}, as: :json
        expect(response).to have_http_status(200)
        expect(JSON.parse(response.body)).to include('reset_password_otp')
        expect((JSON.parse(response.body)['reset_password_otp']).size).to eq(6)
      end

      let(:invalid_mobile) { "+96655#{7.times.map { rand(10) }.join}" }
      it 'response with an error for a wrong mobile' do
        post forgot_password_url, params: { mobile: invalid_mobile }, as: :json
        expect(response).to have_http_status(422)
      end
    end

    context 'verifying the otp than has been sent to the account owner' do
      let(:user) { create :user, reset_password_otp: 6.times.map { rand(6) }.join }
      let(:mobile) { user.mobile }
      let(:otp) { user.reset_password_otp }
      it 'responds success to a valid otp with a reset_password_token ' do
        post verify_otp_url, params: { mobile:, reset_password_otp: otp }, as: :json
        expect(response).to have_http_status(200)
        expect(JSON.parse(response.body)).to include('reset_password_token')
      end
      it 'responds error to an invalid otp ' do
        invalid_otp = 6.times.map { rand(6) }.join
        post verify_otp_url, params: { mobile: mobile, reset_password_otp: invalid_otp }, as: :json
        expect(response).to have_http_status(422)
        expect(JSON.parse(response.body).values).to include('OTP code is incorrect')
      end
    end

      context "verifying the otp than has been sent to the account owner" do
        let(:user) { create :user, reset_password_otp: 6.times.map { rand(6) }.join }
        let(:mobile) { user.mobile }
        let(:otp) { user.reset_password_otp }
        it "responds success to a valid otp with a reset_password_token " do
          post verify_otp_url, params: { mobile: mobile, reset_password_otp: otp }, as: :json
          token = JSON.parse(response.body)['reset_password_token']
          post set_password_url, params: { password: {password_verification_otp: token, password: "123456", password_confirmation: "123456"} }, as: :json
            expect(response).to have_http_status(200)
            expect((JSON.parse(response.body)).values).to include("Password has been updated")
        end
      end
  end

  describe 'reset Password' do
    context 'reset old password' do
      let(:user){FactoryBot.create :user, password: "123456", password_confirmation: "123456"}
      it "returns a success response with a reset password token" do
        post reset_password_url, params: { old_password: "123456"}, headers: session_headers(user),as: :json
        expect(response).to have_http_status(200)
        expect(JSON.parse(response.body)).to include('reset_password_token')
      end
      it "returns erros for incorrect password" do
        post reset_password_url, params: { old_password: "000000"}, headers: session_headers(user),as: :json
        expect(response).to have_http_status(422)
        expect(JSON.parse(response.body).values).to include('Password is incorrect')
      end
    end
  end
end
